var tap = require('tap')
var outmatch = require('../src')

tap.test('Basic', (t) => {
  t.type(outmatch('pattern'), RegExp)
  t.end()
})

tap.test('No wildcards', (t) => {
  t.test('No separator given', (t) => {
    t.ok(outmatch('').test(''))
    t.ok(outmatch('/').test('/'))
    t.ok(outmatch('one').test('one'))
    t.ok(outmatch('one/two').test('one/two'))
    t.notOk(outmatch('').test('/'))
    t.notOk(outmatch('a/b').test('a.b'))
    t.notOk(outmatch('one').test('two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(outmatch('one', '/').test('one'))
    t.ok(outmatch('two', '/').test('two'))
    t.ok(outmatch('one/two', '/').test('one/two'))
    t.ok(outmatch('one/two/three', '/').test('one/two/three'))
    t.ok(outmatch('one.two', '/').test('one.two'))
    t.ok(outmatch('', '/').test(''))
    t.ok(outmatch('one//', '/').test('one//'))
    t.ok(outmatch('/', '/').test('/'))
    t.ok(outmatch(' ', '/').test(' '))
    t.ok(outmatch('/one/', '/').test('/one/'))
    t.notOk(outmatch('one', '/').test('two'))
    t.notOk(outmatch('two', '/').test('one'))
    t.notOk(outmatch('one/two', '/').test('one/three'))
    t.notOk(outmatch('one/two/three', '/').test('one/two/four'))
    t.notOk(outmatch('one', '/').test('one.two'))
    t.notOk(outmatch('one.two', '/').test('one'))
    t.notOk(outmatch('', '/').test('one'))
    t.notOk(outmatch('one', '/').test('one '))
    t.notOk(outmatch(' one', '/').test('one'))
    t.notOk(outmatch('one.two', '/').test('one.two.three'))
    t.notOk(outmatch('', '/').test('**'))
    t.notOk(outmatch('', '/').test('*'))
    t.notOk(outmatch('/', '/').test(''))
    t.notOk(outmatch('/', '/').test('one/'))
    t.notOk(outmatch('/', '/').test('/one'))
    t.notOk(outmatch('', '/').test(' '))
    t.notOk(outmatch('/', '/').test(' '))
    t.notOk(outmatch('/', '/').test(' /'))
    t.notOk(outmatch('/', '/').test('/ '))
    t.notOk(outmatch('/', '/').test(' / '))
    t.notOk(outmatch('one/two', '/').test('one/*'))
    t.notOk(outmatch('one/two', '/').test('one/**'))
    t.notOk(outmatch('one/two/three', '/').test('one/*/three'))
    t.end()
  })

  t.end()
})

tap.test('?', (t) => {
  t.test('No separator given - matches 1 arbitrary char', (t) => {
    t.ok(outmatch('?').test('o'))
    t.ok(outmatch('?').test('/'))
    t.ok(outmatch('on?').test('one'))
    t.ok(outmatch('???').test('one'))
    t.ok(outmatch('???').test('two'))
    t.ok(outmatch('one?two').test('one/two'))
    t.notOk(outmatch('?').test(''))
    t.notOk(outmatch('?').test('on'))
    t.notOk(outmatch('??e').test('on'))
    t.notOk(outmatch('one?').test('one'))
    t.end()
  })

  t.test('Separator given - matches 1 non-separator char', (t) => {
    t.ok(outmatch('?', '/').test('a'))
    t.ok(outmatch('?', '/').test(' '))
    t.ok(outmatch('??', '/').test('ab'))
    t.ok(outmatch('??', '/').test(' b'))
    t.ok(outmatch('???', '/').test('one'))
    t.ok(outmatch('o?e', '/').test('one'))
    t.ok(outmatch('?ne', '/').test('one'))
    t.ok(outmatch('?ne', '/').test('ane'))
    t.ok(outmatch('on?', '/').test('one'))
    t.ok(outmatch('on?', '/').test('ont'))
    t.ok(outmatch('o??', '/').test('one'))
    t.ok(outmatch('o??', '/').test('ota'))
    t.ok(outmatch('?n?', '/').test('one'))
    t.ok(outmatch('one/t?o', '/').test('one/two'))
    t.ok(outmatch('one/tw?', '/').test('one/two'))
    t.ok(outmatch('o?e/tw?', '/').test('one/two'))
    t.notOk(outmatch('?', '/').test(''))
    t.notOk(outmatch('?', '/').test('/'))
    t.notOk(outmatch('?', '/').test('/o'))
    t.notOk(outmatch('?', '/').test('on'))
    t.notOk(outmatch('?', '/').test('o/n'))
    t.notOk(outmatch('??', '/').test(''))
    t.notOk(outmatch('??', '/').test('/'))
    t.notOk(outmatch('??', '/').test('//'))
    t.notOk(outmatch('??', '/').test('o'))
    t.notOk(outmatch('??', '/').test('on/e'))
    t.notOk(outmatch('??', '/').test('one'))
    t.notOk(outmatch('???', '/').test('on'))
    t.notOk(outmatch('???', '/').test('/on'))
    t.notOk(outmatch('???', '/').test('one/two'))
    t.notOk(outmatch('???', '/').test('/'))
    t.notOk(outmatch('???', '/').test('///'))
    t.notOk(outmatch('o?e', '/').test('oe'))
    t.notOk(outmatch('?ne', '/').test('ne'))
    t.notOk(outmatch('on?', '/').test('on'))
    t.notOk(outmatch('on?', '/').test('on/'))
    t.notOk(outmatch('?one', '/').test('one'))
    t.notOk(outmatch('?one', '/').test('/one'))
    t.notOk(outmatch('o??', '/').test('o//'))
    t.notOk(outmatch('o??', '/').test('o/e'))
    t.notOk(outmatch('o??', '/').test('o'))
    t.notOk(outmatch('o??', '/').test('on/e'))
    t.notOk(outmatch('o???', '/').test('on/e'))
    t.notOk(outmatch('one?two', '/').test('one/two'))
    t.notOk(outmatch('one/t?o', '/').test('one/to'))
    t.notOk(outmatch('one/tw?', '/').test('one/tw/'))
    t.notOk(outmatch('o?e/tw?', '/').test('onetwo'))
    t.end()
  })

  t.end()
})

tap.test('*', (t) => {
  t.test('No separator given - matches 0 or more arbitrary chars', (t) => {
    t.ok(outmatch('*').test(''))
    t.ok(outmatch('*').test('/'))
    t.ok(outmatch('*').test('one'))
    t.ok(outmatch('one*').test('one'))
    t.ok(outmatch('one*').test('one/two'))
    t.notOk(outmatch('one*').test('on'))
    t.notOk(outmatch('one*').test('ont'))
    t.notOk(outmatch('one*').test('onte'))
    t.end()
  })

  t.test('Separator given - matches 0 or more non-separator chars', (t) => {
    t.ok(outmatch('*', '/').test(''))
    t.ok(outmatch('*', '/').test('one'))
    t.ok(outmatch('*/*', '/').test('one/two'))
    t.ok(outmatch('*/*', '/').test('one/'))
    t.ok(outmatch('*/*', '/').test('one/ '))
    t.ok(outmatch('*/*/*', '/').test('one/two/three'))
    t.ok(outmatch('*/*/*', '/').test('//'))
    t.ok(outmatch('one/*', '/').test('one/two'))
    t.ok(outmatch('one/*', '/').test('one/*'))
    t.ok(outmatch('one/*', '/').test('one/**'))
    t.ok(outmatch('one/*', '/').test('one/***'))
    t.ok(outmatch('one/*', '/').test('one/'))
    t.ok(outmatch('one/*', '/').test('one/ '))
    t.ok(outmatch('one/*/three', '/').test('one/two/three'))
    t.ok(outmatch('one/*/three/', '/').test('one/two/three/'))
    t.ok(outmatch('one/*/three/*', '/').test('one/two/three/'))
    t.ok(outmatch('one/*/three/*', '/').test('one/two/three/four'))
    t.ok(outmatch('one*', '/').test('one'))
    t.ok(outmatch('*two', '/').test('two'))
    t.ok(outmatch('one*', '/').test('onetwo'))
    t.ok(outmatch('*two', '/').test('onetwo'))
    t.ok(outmatch('one*three', '/').test('onetwothree'))
    t.ok(outmatch('one*three', '/').test('onethree'))
    t.ok(outmatch('one/*three', '/').test('one/twothree'))
    t.ok(outmatch('one/two*', '/').test('one/twothree'))
    t.ok(outmatch('*/', '/').test('/'))
    t.ok(outmatch('*/one', '/').test('/one'))
    t.ok(outmatch('*n*', '/').test('one'))
    t.ok(outmatch('*n*', '/').test('oonee'))
    t.ok(outmatch('*n*', '/').test('n'))
    t.ok(outmatch('o*n*e', '/').test('one'))
    t.ok(outmatch('o*n*e', '/').test('oone'))
    t.ok(outmatch('o*n*e', '/').test('onne'))
    t.ok(outmatch('o*n*e', '/').test('oonne'))
    t.ok(outmatch('*ne/*o', '/').test('ne/o'))
    t.ok(outmatch('*ne/*o', '/').test('one/o'))
    t.ok(outmatch('*ne/*o', '/').test('ne/two'))
    t.ok(outmatch('*ne/*o', '/').test('one/two'))
    t.ok(outmatch('*/*o', '/').test('/o'))
    t.ok(outmatch('*/*o', '/').test('/two'))
    t.ok(outmatch('*/*o', '/').test('one/two'))
    t.notOk(outmatch('*', '/').test('/'))
    t.notOk(outmatch('*', '/').test('//'))
    t.notOk(outmatch('*', '/').test('one/two'))
    t.notOk(outmatch('*', '/').test('one/'))
    t.notOk(outmatch('*', '/').test('/one'))
    t.notOk(outmatch('one/*', '/').test(''))
    t.notOk(outmatch('one/*', '/').test('/'))
    t.notOk(outmatch('one/*', '/').test('//'))
    t.notOk(outmatch('one/*', '/').test('one/two/three'))
    t.notOk(outmatch('one/*', '/').test('one'))
    t.notOk(outmatch('one/*', '/').test('/one'))
    t.notOk(outmatch('one/*', '/').test('two/three'))
    t.notOk(outmatch('*/one', '/').test(''))
    t.notOk(outmatch('*/one', '/').test('/'))
    t.notOk(outmatch('*/one', '/').test('//'))
    t.notOk(outmatch('*/one', '/').test('one/two/three'))
    t.notOk(outmatch('*/one', '/').test('one'))
    t.notOk(outmatch('*/one', '/').test('one/'))
    t.notOk(outmatch('*/one', '/').test('one/two'))
    t.notOk(outmatch('*two', '/').test('one/two'))
    t.notOk(outmatch('*n*', '/').test(''))
    t.notOk(outmatch('*n*', '/').test('/'))
    t.notOk(outmatch('*n*', '/').test('n/'))
    t.notOk(outmatch('*n*', '/').test('one/'))
    t.notOk(outmatch('*n*', '/').test('/n'))
    t.notOk(outmatch('*n*', '/').test('/n/'))
    t.notOk(outmatch('o*n*e', '/').test('/one'))
    t.notOk(outmatch('o*n*e', '/').test('one/'))
    t.notOk(outmatch('o*n*e', '/').test('o/ne'))
    t.notOk(outmatch('o*n*e', '/').test('on/e'))
    t.notOk(outmatch('o*n*e', '/').test('o/n/e'))
    t.notOk(outmatch('o*n*e', '/').test(' one '))
    t.notOk(outmatch('*ne/*o', '/').test('/ne/o'))
    t.notOk(outmatch('*/*o', '/').test('//o'))
    t.notOk(outmatch('*/*o', '/').test('/o/'))
    t.end()
  })

  t.end()
})

tap.test('**', (t) => {
  t.test('No separator given - acts as *', (t) => {
    t.ok(outmatch('**').test(''))
    t.ok(outmatch('**').test('/'))
    t.ok(outmatch('**').test('one'))
    t.ok(outmatch('one**').test('one'))
    t.ok(outmatch('one**').test('one/two'))
    t.notOk(outmatch('one**').test('on'))
    t.notOk(outmatch('one**').test('ont'))
    t.notOk(outmatch('one**').test('onte'))
    t.end()
  })

  t.test('Separator given - matches any number of segments', (t) => {
    t.ok(outmatch('**', '/').test(''))
    t.ok(outmatch('**', '/').test(' '))
    t.ok(outmatch('**', '/').test(' /'))
    t.ok(outmatch('**', '/').test('/'))
    t.ok(outmatch('**', '/').test('///'))
    t.ok(outmatch('**', '/').test('two'))
    t.ok(outmatch('**', '/').test('two/three'))
    t.ok(outmatch('**', '/').test('   /three'))
    t.ok(outmatch('**', '/').test('   /three///'))
    t.ok(outmatch('**', '/').test('/three'))
    t.ok(outmatch('**', '/').test('//three'))
    t.notOk(outmatch('one/**', '/').test('one'))
    t.ok(outmatch('one/**', '/').test('one/two'))
    t.ok(outmatch('one/**', '/').test('one/two/three'))
    t.ok(outmatch('one/**', '/').test('one/'))
    t.ok(outmatch('one/**', '/').test('one/ / '))
    t.ok(outmatch('one/**', '/').test('one/*/ **'))
    t.ok(outmatch('one/**', '/').test('one/***'))
    t.ok(outmatch('**/', '/').test('/one/'))
    t.ok(outmatch('**/one', '/').test('/one'))
    t.ok(outmatch('one/**/two', '/').test('one/two'))
    t.ok(outmatch('one/**/three', '/').test('one/two/three'))
    t.ok(outmatch('one/**/four', '/').test('one/two/three/four'))
    t.ok(outmatch('o**', '/').test('o'))
    t.ok(outmatch('o**', '/').test('one'))
    t.ok(outmatch('o**', '/').test('onetwo'))
    t.ok(outmatch('**e', '/').test('one'))
    t.ok(outmatch('**e', '/').test('twoone'))
    t.notOk(outmatch('one/**', '/').test(''))
    t.notOk(outmatch('one/**', '/').test('/'))
    t.notOk(outmatch('one/**', '/').test('//'))
    t.notOk(outmatch('one/**', '/').test('two'))
    t.notOk(outmatch('one/**', '/').test('/one'))
    t.notOk(outmatch('**/one', '/').test(''))
    t.notOk(outmatch('**/one', '/').test('/'))
    t.notOk(outmatch('**/one', '/').test('//'))
    t.notOk(outmatch('**/one', '/').test('two'))
    t.notOk(outmatch('**/one', '/').test('one/'))
    t.notOk(outmatch('**two', '/').test('one/two'))
    t.notOk(outmatch('**two', '/').test('one/two'))
    t.notOk(outmatch('**/', '/').test('/one'))
    t.notOk(outmatch('**/', '/').test('/one/two'))
    t.notOk(outmatch('o**', '/').test(''))
    t.notOk(outmatch('o**', '/').test('two'))
    t.notOk(outmatch('o**', '/').test('o/two'))
    t.notOk(outmatch('o**', '/').test('o/two/three'))
    t.notOk(outmatch('**e', '/').test(''))
    t.notOk(outmatch('**e', '/').test('two'))
    t.notOk(outmatch('**e', '/').test('two/one'))
    t.notOk(outmatch('**e', '/').test('three/two/one'))
    t.end()
  })

  t.end()
})

tap.test('? and *', (t) => {
  t.test('No separator given', (t) => {
    t.ok(outmatch('?*').test('o'))
    t.ok(outmatch('?*').test('one'))
    t.ok(outmatch('?*').test('one/two'))
    t.ok(outmatch('?ne*').test('one/two'))
    t.notOk(outmatch('?*').test(''))
    t.notOk(outmatch('one?*').test('one'))
    t.notOk(outmatch('?ne*').test('ne/two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(outmatch('?*', '/').test('one'))
    t.ok(outmatch('?*/', '/').test('one/'))
    t.ok(outmatch('?*/*', '/').test('one/'))
    t.ok(outmatch('?*/*', '/').test('one/two'))
    t.ok(outmatch('?*?', '/').test('oe'))
    t.ok(outmatch('?*?', '/').test('one'))
    t.ok(outmatch('?*?', '/').test('onnne'))
    t.ok(outmatch('?*?/*', '/').test('one/'))
    t.ok(outmatch('?*?/*', '/').test('one/two'))
    t.ok(outmatch('?*?/*/*', '/').test('one/two/three'))
    t.ok(outmatch('?*?/*/*', '/').test('one//'))
    t.notOk(outmatch('?*', '/').test(''))
    t.notOk(outmatch('?*', '/').test('/'))
    t.notOk(outmatch('?*', '/').test('one/'))
    t.notOk(outmatch('?*', '/').test('/one'))
    t.notOk(outmatch('?*/*', '/').test('one'))
    t.notOk(outmatch('?*/*', '/').test('one/two/'))
    t.notOk(outmatch('?*/*', '/').test('one/two/three'))
    t.notOk(outmatch('?*?', '/').test('o'))
    t.notOk(outmatch('?*?', '/').test('/one'))
    t.notOk(outmatch('?*?', '/').test('o/e'))
    t.notOk(outmatch('?*?/*', '/').test(''))
    t.notOk(outmatch('?*?/*', '/').test('one'))
    t.notOk(outmatch('?*?/*', '/').test('one/two/three'))
    t.notOk(outmatch('?*?/*/*', '/').test(''))
    t.notOk(outmatch('?*?/*/*', '/').test('one'))
    t.notOk(outmatch('?*?/*/*', '/').test('one/two'))
    t.notOk(outmatch('?*?/*/*', '/').test('one/two/three/four'))
    t.notOk(outmatch('?*?/*/*', '/').test('o/two/three'))
    t.end()
  })

  t.end()
})

tap.test('* and **', (t) => {
  t.test('No separator given', (t) => {
    t.ok(outmatch('*/**').test('/'))
    t.ok(outmatch('*/**').test('one/two'))
    t.ok(outmatch('**/*').test('one/two'))
    t.ok(outmatch('one**/*').test('one/two'))
    t.ok(outmatch('one*/**').test('one/two'))
    t.ok(outmatch('**one*/**').test('one/two'))
    t.notOk(outmatch('**/*').test(''))
    t.notOk(outmatch('**/*').test('one'))
    t.notOk(outmatch('one**/*').test('one'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.notOk(outmatch('*/**', '/').test(''))
    t.notOk(outmatch('*/**', '/').test(' '))
    t.ok(outmatch('*/**', '/').test(' /'))
    t.ok(outmatch('*/**', '/').test('/'))
    t.ok(outmatch('*/**', '/').test('///'))
    t.notOk(outmatch('*/**', '/').test('two'))
    t.ok(outmatch('*/**', '/').test('two/three'))
    t.ok(outmatch('*/**', '/').test('   /three'))
    t.ok(outmatch('*/**', '/').test('   /three///'))
    t.ok(outmatch('*/**', '/').test('/three'))
    t.ok(outmatch('*/**', '/').test('//three'))
    t.ok(outmatch('**/*', '/').test('one'))
    t.ok(outmatch('**/*', '/').test('one/two'))
    t.ok(outmatch('**/*', '/').test('one/two/three'))
    t.ok(outmatch('**/*', '/').test('one/*/three'))
    t.ok(outmatch('**/*', '/').test('one/*/**'))
    t.ok(outmatch('*/**/*', '/').test('one/two'))
    t.ok(outmatch('*/**/*', '/').test('one/two/three'))
    t.ok(outmatch('*/**/*', '/').test('one/two/three/four/five'))
    t.ok(outmatch('*/**/*', '/').test('one/two/*/four/five'))
    t.ok(outmatch('*/**/*', '/').test('one/two/*/four/**'))
    t.ok(outmatch('*/**/*', '/').test('one/ /three'))
    t.ok(outmatch('*/**/*', '/').test('one/two'))
    t.notOk(outmatch('*/**/*/**', '/').test('one/two'))
    t.ok(outmatch('*/**/*/**', '/').test('one/two/three'))
    t.notOk(outmatch('one/*/**', '/').test('one/two'))
    t.ok(outmatch('one/*/**', '/').test('one/two/three'))
    t.ok(outmatch('one/*/**', '/').test('one/two/three/four'))
    t.ok(outmatch('one/*/**', '/').test('one/ / '))
    t.ok(outmatch('one/*/**', '/').test('one/*/ **'))
    t.notOk(outmatch('one/*/**', '/').test('one/***'))
    t.ok(outmatch('one/**/two/*', '/').test('one/two/three'))
    t.ok(outmatch('one/**/two/*', '/').test('one/two/three'))
    t.ok(outmatch('one/**/three/*', '/').test('one/two/three/four'))
    t.ok(outmatch('*e/**e', '/').test('one/one'))
    t.ok(outmatch('*e/**e', '/').test('e/e'))
    t.notOk(outmatch('*/**/*', '/').test('one'))
    t.notOk(outmatch('*/**/*/**', '/').test('one'))
    t.notOk(outmatch('one/*/**', '/').test(''))
    t.notOk(outmatch('one/*/**', '/').test('/'))
    t.notOk(outmatch('one/*/**', '/').test('//'))
    t.notOk(outmatch('one/*/**', '/').test('one'))
    t.notOk(outmatch('*/**/one', '/').test(''))
    t.notOk(outmatch('*/**/one', '/').test('/'))
    t.notOk(outmatch('*/**/one', '/').test('//'))
    t.notOk(outmatch('*/**/one', '/').test('one'))
    t.notOk(outmatch('*/**/one', '/').test('one/two'))
    t.notOk(outmatch('*/**/one', '/').test('two/one/two'))
    t.notOk(outmatch('*e/**e', '/').test('one/two'))
    t.notOk(outmatch('*e/**e', '/').test('two/e'))
    t.end()
  })

  t.end()
})

tap.test('? and **', (t) => {
  t.test('No separator given', (t) => {
    t.ok(outmatch('?**').test('o'))
    t.ok(outmatch('?**').test('one'))
    t.ok(outmatch('?**').test('one/two'))
    t.ok(outmatch('?ne**').test('one/two'))
    t.notOk(outmatch('?**').test(''))
    t.notOk(outmatch('one?**').test('one'))
    t.notOk(outmatch('?ne**').test('ne/two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(outmatch('**/?', '/').test('o'))
    t.ok(outmatch('**/?', '/').test('one/t'))
    t.ok(outmatch('**/?', '/').test('one/two/three/f'))
    t.ok(outmatch('???/**/???', '/').test('one/two'))
    t.ok(outmatch('???/**/???', '/').test('one/three/two'))
    t.ok(outmatch('???/**/???', '/').test('one//two'))
    t.notOk(outmatch('**/?', '/').test(''))
    t.notOk(outmatch('**/?', '/').test('one'))
    t.notOk(outmatch('???/**/???', '/').test('one/two/three'))
    t.notOk(outmatch('???/**/???', '/').test('one'))
    t.notOk(outmatch('???/**/???', '/').test('onetwo'))
    t.end()
  })

  t.end()
})

tap.test('?, * and **', (t) => {
  t.test('No separator given', (t) => {
    t.ok(outmatch('?*/**').test('one/two'))
    t.ok(outmatch('?*/?**').test('one/two'))
    t.notOk(outmatch('?*/**').test('one'))
    t.notOk(outmatch('?*/**').test('/two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.notOk(outmatch('?*?/**', '/').test('oe'))
    t.notOk(outmatch('?*?/**', '/').test('one'))
    t.ok(outmatch('?*?/**', '/').test('one/'))
    t.ok(outmatch('?*?/**', '/').test('one/two'))
    t.ok(outmatch('?*?/**', '/').test('one/two/three'))
    t.ok(outmatch('?*?/**', '/').test('one/two/three/four'))
    t.ok(outmatch('*/**/?*', '/').test('/o'))
    t.ok(outmatch('*/**/?*', '/').test('/one'))
    t.ok(outmatch('*/**/?*', '/').test('one/two'))
    t.ok(outmatch('*/**/?*', '/').test('one/two/three'))
    t.ok(outmatch('*/**/?*', '/').test('/two/three'))
    t.ok(outmatch('*/**/?*', '/').test('one/two/three/four'))
    t.notOk(outmatch('?*?/**', '/').test(''))
    t.notOk(outmatch('?*?/**', '/').test('/'))
    t.notOk(outmatch('?*?/**', '/').test('o'))
    t.notOk(outmatch('?*?/**', '/').test('o/two'))
    t.notOk(outmatch('*/**/?*', '/').test(''))
    t.notOk(outmatch('*/**/?*', '/').test('o'))
    t.notOk(outmatch('*/**/?*', '/').test('o/'))
    t.end()
  })

  t.end()
})

tap.test('[]', (t) => {
  t.ok(outmatch('[abc]').test('a'))
  t.ok(outmatch('[abc]').test('b'))
  t.notOk(outmatch('[abc]').test('d'))
  t.notOk(outmatch('[abc]').test('ab'))
  t.ok(outmatch('[ab][cd]').test('ac'))
  t.ok(outmatch('[ab][cd]').test('bd'))
  t.notOk(outmatch('[ab][cd]').test('a'))
  t.notOk(outmatch('[ab][cd]').test('c'))
  t.notOk(outmatch('[ab][cd]').test('ca'))
  t.notOk(outmatch('[ab][cd]').test('abc'))
  t.ok(outmatch('[a-z]').test('g'))
  t.ok(outmatch('[a-z]').test('z'))
  t.notOk(outmatch('[a-z]').test('A'))
  t.notOk(outmatch('[a-z]').test('2'))
  t.notOk(outmatch('[a-z]').test('ab'))
  t.notOk(outmatch('[a-z]').test(''))
  t.ok(outmatch('[0-5]').test('2'))
  t.ok(outmatch('[0-5]').test('0'))
  t.notOk(outmatch('[0-5]').test('6'))
  t.notOk(outmatch('[0-5]').test('a'))
  t.notOk(outmatch('[0-5]').test('01'))
  t.notOk(outmatch('[0-5]').test(''))
  t.ok(outmatch('[0-z]').test('6'))
  t.ok(outmatch('[0-z]').test('E'))
  t.ok(outmatch('[0-z]').test('s'))
  t.notOk(outmatch('[0-z]').test('!'))
  t.notOk(outmatch('[0-z]').test(''))
  t.notOk(outmatch('[0-z]').test(' '))
  t.notOk(outmatch('[0-z]').test('0z'))
  t.notOk(outmatch('[0-z]').test('0-z'))
  t.ok(outmatch('[-z]').test('-'))
  t.ok(outmatch('[-z]').test('z'))
  t.notOk(outmatch('[-z]').test('-z'))
  t.notOk(outmatch('[-z]').test('b'))
  t.notOk(outmatch('[-z]').test(''))
  t.notOk(outmatch('[]').test(''))
  t.notOk(outmatch('[]').test(' '))
  t.notOk(outmatch('[]').test('a'))
  t.end()
})

tap.test('Supports different separators', (t) => {
  t.ok(outmatch('', undefined).test(''))
  t.ok(outmatch('one', undefined).test('one'))
  t.ok(outmatch('o?e', undefined).test('one'))
  t.ok(outmatch('o?e', {}).test('one'))
  t.ok(outmatch('o?e', { separator: undefined }).test('one'))
  t.ok(outmatch('', '.').test(''))
  t.ok(outmatch('one', '.').test('one'))
  t.ok(outmatch('o?e', '.').test('one'))
  t.ok(outmatch('one.two', '.').test('one.two'))
  t.ok(outmatch('one.two', { separator: '.' }).test('one.two'))
  t.ok(outmatch('one.*', '.').test('one.*'))
  t.ok(outmatch('one.**.*\\?js', '.').test('one.two.three?js'))
  t.ok(outmatch('one.**.*\\.js', '.').test('one.two.three.js'))
  t.ok(outmatch('one ** *\\?js', ' ').test('one two three?js'))
  t.notOk(outmatch('one.two', '.').test('one/two'))
  t.notOk(outmatch('one.two', { separator: '.' }).test('one/two'))
  t.notOk(outmatch('one?two', '.').test('one.two'))
  t.notOk(outmatch('one.*', '.').test('one/*'))
  t.end()
})

tap.test('Treats other RegExp characters literally', (t) => {
  t.ok(outmatch('^$.+-|)').test('^$.+-|)'))
  t.notOk(outmatch('[].').test('[]?'))
  t.notOk(outmatch('one', '/').test('one[].*+{}]][[..$'))
  t.throws(() => outmatch('['))
  t.throws(() => outmatch('@(one'))
  t.throws(() => outmatch('[].*+{}]][[..$', '/'))
  t.throws(() => outmatch('one[].*+{}]  ][[..$', '/'))
  t.throws(() => outmatch('one[].*+{}]][[..$', '/'))
  t.end()
})

tap.test('Treats escaped wildcards literally', (t) => {
  t.test('No separator given', (t) => {
    t.ok(outmatch('\\?').test('?'))
    t.ok(outmatch('one/\\*\\*').test('one/**'))
    t.ok(outmatch('on\\?.two\\*\\*').test('on?.two**'))
    t.notOk(outmatch('\\?').test('a'))
    t.notOk(outmatch('one/\\*\\*').test('one/two'))
    t.notOk(outmatch('on\\?.two\\*\\*').test('one.two'))
    t.end()
  })

  t.test('Separator given', (t) => {
    t.ok(outmatch('\\?', '/').test('?'))
    t.ok(outmatch('\\*', '/').test('*'))
    t.ok(outmatch('\\*\\*', '/').test('**'))
    t.ok(outmatch('\\?\\*', '/').test('?*'))
    t.ok(outmatch('\\?\\*\\*', '/').test('?**'))
    t.ok(outmatch('one\\?', '/').test('one?'))
    t.ok(outmatch('one\\*', '/').test('one*'))
    t.ok(outmatch('one\\*\\*', '/').test('one**'))
    t.ok(outmatch('one/\\*\\*', '/').test('one/**'))
    t.notOk(outmatch('\\?', '/').test('!'))
    t.notOk(outmatch('\\*', '/').test('!'))
    t.notOk(outmatch('\\*', '/').test('!!'))
    t.notOk(outmatch('\\*\\*', '/').test('!!'))
    t.notOk(outmatch('\\*\\*', '/').test('one/two'))
    t.notOk(outmatch('\\?\\*', '/').test('one'))
    t.notOk(outmatch('\\?\\*\\*', '/').test('one'))
    t.notOk(outmatch('one\\?', '/').test('one!'))
    t.notOk(outmatch('one\\*', '/').test('one!'))
    t.notOk(outmatch('one\\*\\*', '/').test('one!!'))
    t.notOk(outmatch('one/\\*\\*', '/').test('one/!!'))
    t.end()
  })
  t.end()
})

tap.test('Accepts an array of patterns', (t) => {
  t.ok(outmatch(['one']).test('one'))
  t.notOk(outmatch(['one']).test('two'))
  t.ok(outmatch(['**', 'one']).test('whatever'))
  t.ok(outmatch(['one', 'two', 'three']).test('one'))
  t.ok(outmatch(['one', 'two', 'three']).test('two'))
  t.ok(outmatch(['one', 'two', 'three']).test('three'))
  t.notOk(outmatch(['one', 'two', 'three']).test('four'))
  t.ok(outmatch(['one', 'one/two'], '/').test('one'))
  t.ok(outmatch(['one', 'one/two'], '/').test('one/two'))
  t.notOk(outmatch(['one', 'one/two'], '/').test('two'))
  t.notOk(outmatch(['one', 'one/two'], '/').test('onetwo'))
  t.ok(outmatch(['*', '*/*'], '/').test('one'))
  t.ok(outmatch(['*', '*/*'], '/').test('two'))
  t.ok(outmatch(['*', '*/*'], '/').test('one/two'))
  t.notOk(outmatch(['*', '*/*'], '/').test('one/two/three'))
  t.end()
})
